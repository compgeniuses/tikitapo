import { GoogleGenAI } from "@google/genai";
import { Profile, Board, Difficulty, CellState, Move } from '../types';

if (!process.env.API_KEY) {
  // In a real app, this would be handled by the build process or environment.
  // For this context, we'll alert the developer if the key is missing.
  console.warn("API_KEY environment variable not set. Gemini API calls will fail.");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY! });

const getPromptForProfile = (profile: Profile): string => {
    switch (profile) {
        case Profile.Man:
            return "A triumphant, heroic male warrior in full ornate, family-friendly armor, digital art, Rembrandt lighting, intricate details, fantasy, epic, cinematic, high resolution portrait. SFW.";
        case Profile.Woman:
            return "A powerful and wise sorceress queen in elegant, flowing, non-revealing robes, fantasy art, magical aura, detailed face, cinematic lighting, epic scene. SFW.";
        case Profile.Child:
            return "A curious child discovering a glowing, magical forest, storybook illustration style, vibrant colors, whimsical, sense of wonder, detailed fantasy landscape. SFW.";
        default:
            return "A beautiful, award-winning photograph of a celebratory landscape after a great victory.";
    }
};

export const generateVictoryImage = async (profile: Profile): Promise<string> => {
    const prompt = getPromptForProfile(profile);
    
    try {
        const response = await ai.models.generateImages({
            model: 'imagen-4.0-generate-001',
            prompt: prompt,
            config: {
                numberOfImages: 1,
                outputMimeType: 'image/jpeg',
                aspectRatio: '1:1',
            },
        });

        if (response.generatedImages && response.generatedImages.length > 0 && response.generatedImages[0].image.imageBytes) {
            const base64ImageBytes: string = response.generatedImages[0].image.imageBytes;
            return `data:image/jpeg;base64,${base64ImageBytes}`;
        } else {
            throw new Error("No image was generated by the API.");
        }
    } catch (error) {
        console.error("Error generating image with Gemini:", error);
        throw new Error("Failed to generate image from Gemini API.");
    }
};

export const generateAvatar = async (prompt: string): Promise<string> => {
    const fullPrompt = `Create a unique, SFW, portrait-style avatar based on the following description: "${prompt}". The style should be vibrant digital art, suitable for a profile picture. No text, no words.`;
    
    try {
        const response = await ai.models.generateImages({
            model: 'imagen-4.0-generate-001',
            prompt: fullPrompt,
            config: {
                numberOfImages: 1,
                outputMimeType: 'image/jpeg',
                aspectRatio: '1:1',
            },
        });

        if (response.generatedImages?.[0]?.image.imageBytes) {
            const base64ImageBytes: string = response.generatedImages[0].image.imageBytes;
            return `data:image/jpeg;base64,${base64ImageBytes}`;
        } else {
            throw new Error("No avatar image was generated by the API.");
        }
    } catch (error) {
        console.error("Error generating avatar with Gemini:", error);
        throw new Error("Failed to generate avatar from Gemini API.");
    }
};

const getPersonalitySystemInstruction = (difficulty: Difficulty): string => {
    switch (difficulty) {
        case Difficulty.Simple:
            return "You are a friendly and encouraging AI opponent in a Connect-N game. You are playing as 'O'. Be cheerful and a bit goofy. Keep your comments very short.";
        case Difficulty.Hard:
            return "You are a confident and strategic AI opponent in a Connect-N game. You are playing as 'O'. Acknowledge the human's skill but remain certain of your victory. Keep your comments short and witty.";
        case Difficulty.Pro:
            return "You are a cold, calculating, and arrogant grandmaster AI opponent in a Connect-N game. You are playing as 'O'. Your comments should be dismissive, analytical, and short, as if the human is a novice.";
        default:
            return "You are an AI opponent in a Connect-N game. Keep your comments short.";
    }
};

const formatBoardForPrompt = (board: Board): string => {
    return board.map(row => 
        row.map(cell => {
            switch(cell) {
                case CellState.X: return 'X';
                case CellState.O: return 'O';
                case CellState.Obstacle: return '#';
                default: return '.';
            }
        }).join(' ')
    ).join('\n');
};

export const getAIPersonalityComment = async (board: Board, difficulty: Difficulty, lastMove: Move): Promise<string> => {
    const systemInstruction = getPersonalitySystemInstruction(difficulty);
    const boardString = formatBoardForPrompt(board);

    const prompt = `The current board state is:\n${boardString}\n\nI (O) just made a move at row ${lastMove.row}, column ${lastMove.col}. What is a short, in-character taunt or comment I can say to the human player (X)? Respond with only the comment, without quotes, and in 15 words or less.`;

    try {
        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash',
            contents: prompt,
            config: {
                systemInstruction: systemInstruction,
                temperature: 0.9,
                maxOutputTokens: 50,
            }
        });
        
        const text = response.text;
        if (text) {
            return text.trim().replace(/"/g, '');
        }

        console.warn("Gemini comment generation returned no text. Full response:", response);
        return "...";

    } catch (error) {
        console.error("Error generating AI comment with Gemini:", error);
        return "Hmm...";
    }
};